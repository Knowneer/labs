#include <iostream>

/*
if (условие) {
    // блок выполняется, если условие == true
}

if (условие) {
    // если условие истинно
} else {
    // если условие ложно
}

if (условие1) {
    ...
} else if (условие2) {
    ...
} else if (условие3) {
    ...
} else {
    // если ни одно сверху не выполнилось
}


switch (x) {
    case 0: ...
    case 1: ...
    case 2: ...
    default: ...
}

пример с месяцами

операции сравнения
if (x != 5 && x != 10 || (x= 12) ){}
== 
!=
<=
>=
<
>

&& логическое и
|| логическое или
! не 

Short-circuit evaluation - Это оптимизация, при которой вторая часть логического выражения 
не вычисляется, если итог уже можно определить по первой

A && B =  B не проверяется если А ложно
			int t = 0; t<10 ; t++ 
for (инициализация; условие; шаг) {
    // тело цикла
}

while (условие) {
    // тело цикла
}


do {
    // тело цикла
} while (условие);


break — немедленно прерывает выполнение цикла, и управление выходит за его пределы

continue — пропускает оставшуюся часть тела цикла в текущей итерации
и сразу переходит к следующей итерации

Бесконечный цикл — цикл, у которого условие всегда истинно
или в котором нет выхода

проблемы 
может потреблять большие ресурсы оперативки, может подвиснуть программу 
В интерфейсных/системных программах может повесить всю систему/поток

если бесконечный цикл нужен (например, обработка событий), внутри всегда делают условие выхода:
while (true) {
    int x;
    std::cin >> x;
    if (x == 0) break; // точка выхода
}





*/

/*
Число Армстронга равно сумме своих цифр, возведенных в степень, равную количеству цифр.
*/
int main (){
/*
	bool c = false;
	bool y = false;
	if (c ^ y){
		std::cout << "1";
	} else{
		std::cout << "0";
	}
*/


	int A,B;
	std::cout << "Введите A и B (1 <= A <= B <= 10000): ";
  std::cin >> A >> B;
  if (A < 1 || B < 1 || A > B || B > 10000) {
      std::cout << "Некорректные границы диапазона" << std::endl;
      return 0;
  }

	bool found = false;
	for (int x = A; x<=B; ++x){
		int k = 0;
		int tmp = x;
		while (tmp > 0){  // нахожу количество цифр
			tmp /= 10;  
			k++;
		}

		int sum = 0;
		tmp = x;
		while (tmp >0){
			int d = tmp%10;

			int p = 1;
			for (int t = 0; t< k; t++){
				p *= d;
			}
			sum += p;
			tmp /= 10;
		}

		if (sum == x){
			if (found) std::cout << ' ';
			std::cout << x;
			found = true;
		}
	}

	if (!found) {
    std::cout << "На отрезке [" << A << ", " << B << "] чисел Армстронга нет";
  }

  std::cout << std::endl;

	return 0;
}

